>> JSP 개요 <<

1. JSP 란?
-- Java Server Page의 약자
   Java의 웹서버 프로그램 스펙(서블릿)으로 변환되어 서비스 된다.
   서블릿(Servlet)이라함은 웹서비스 기능을 해주는 자바 클래스를 말한다.  


2. JSP 의 장점
  1). 서블릿(Servlet)보다 쉽고, 작성하기가 빠르다.
  2). 디자인부분(html)과 로직부분(java)으로 이루어져 있다.
      그리고 디자인부분(html)과 로직부분(java)을 분리시킬수도 있다.
  3). 프로그래머가 직접 코딩한 서블릿(Servlet)보다 
      최적화된 서블릿(Servlet)으로 생성시켜 주므로
      효율적인 코드가 만들어진다.    
  4). JavaBean 의 사용이 쉽다.
  5). 웹애플리케이션 상에서 변수의 사용가능한 범위(scope)설정이 쉽다.
  
  
3. JSP를 이루는 구성인자(element)
   1). 지시어(directive)
   2). 스크립팅 원소(scripting element)
       -- 선언문
       -- 스크립틀릿
       -- 출력식
   3). JSP 액션(표준액션, 커스텀액션)
   
   
   3-1. 지시어(directive)
     -- 형태 : <%@지시어%>
     
     -- 지시어의 종류 3가지 
     [1] page
     [2] include
     [3] taglib
     
     
   3-2. 스크립팅 원소(scripting element)
    -- 기능 : JSP 페이지에서 자바 코드를 
              직접 기술할 수 있게 하는 기능.
    
    스크립팅 원소(scripting element)의 종류
    [1] 선언(declaration)    	==>  <%! 자바코드 %>
    [2] 스크립틀릿(scriptlet) 	==>  <% 자바코드 %>
    [3] 표현식(expression)    ==>  <%= 자바코드 %>                    


4. 서블릿(Servlet)이란 ?
   ==> 서블릿(Servlet)은 서블릿(Servlet) 클래스로 부터 만들어진 객체(Object)말한다.
   웹컨테이너(Web Application Server / Tomcat Server)는 서블릿 클래스를 가지고 
   서블릿 객체를 만든 다음에,
   그 객체를 초기화(사용할 수 있도록 준비된것)해서 웹서비스를 할 수 있는 상태로 만드는데,
   이런 작업을 거친 서블릿 객체만 서블릿(Servlet) 이라고 할 수 있다.
   즉, 웹서비스를 할 수 있는 자바의 객체를 서블릿(Servlet) 이라고 부른다.
       
   "서블릿클래스" ===(인스턴스화)===> "서블릿 객체" ===(초기화)===> "서블릿"

   이와 같이 서블릿 클래스가 서블릿이 되기 위해서는 
   인스턴스와 및 초기화라는 두 단계를 거쳐야 한다. 
   하지만 이 두 단계는 모두 웹 컨테이너(Tomcat Server)에 의해 수행되기 때문에 
   프로그래머인 우리는 해야할 일이 없다. 

   우리는 단지, 정해진 규칙에 따라 서블릿 클래스를 코딩해서 작성해서 컴파일하고,
   웹 컨테이너에 설치하고, 등록하기만 하면 된다.
   
   단, 서블릿(Servlet) 클래스를 올바르게 작성하기 위해서는 반드시 3가지 규칙을 따라야 한다.


  ※※ 서블릿 클래스를 작성할때 지켜야 할 규칙 3가지 ※※

	1). 서블릿(Servlet) 클래스는 반드시
		javax.servlet.http.HttpServlet 클래스를 부모 클래스로 상속을 받아야 한다.

	2). 웹클라이언트의 요청 방식이 GET 방식으로 요청을 해오면 
		doGet() 메소드로 응답을 해주도록 코딩을 해야 하고,
		웹클라이언트의 요청 방식이 POST 방식으로 요청을 해오면 
		doPost() 메소드로 응답을 해주도록 코딩을 해주어야 한다.
		그러므로 반드시 doGet() 메소드와 doPost() 메소드를 
		Overriding(재정의)를 해주어야 한다.
       
		doGet()메소드와 doPost()메소드의 
		첫번째 파라미터는 HttpServletRequest 타입이고,
		두번째 파라미터는 HttpServletResponse 타입이다.    


	3). 응답처리 결과인 HTML 문서는 doGet() 메소드, doPost() 메소드 모두 
		두번째 파라미터를 이용해서 출력해야 한다.

                  
      Servlet 인터페이스  <------- GenericSevlet 클래스 (Servlet 인터페이스를 구현한 클래스)

                                             ^
                                             |
                                             |
                                    HttpServlet 클래스 (GenericSevlet 클래스의 자손 클래스)

                                             ^
                                             |
                                             |
                                    우리가 작성하는 서블릿클래스

                                << 서블릿 클래스의 상속/구현 관계>>


      public abstract class HttpServlet
      extends GenericServlet

      추상클래스인 HttpServlet 을 상속받아 우리가 작성하는 서블릿 클래스는 반드시 
      doGet() 메소드 또는 doPost() 메소드를 override를 해주어야 한다.

      1. doGet()메소드  - 웹클라이언트의 요청이 GET 방식일 경우 처리해줄 메소드
      2. doPost()메소드 - 웹클라이언트의 요청이 POST 방식일 경우 처리해줄 메소드



※※ 서블릿 클래스를 작성해보기 ※※
- 클래스명 : HundredServlet

  지금부터 작성할 서블릿 클래스는 1 부터 100 까지의 정수를 더해서, 
  그 결과를 출력하는 서블릿 클래스이다.
  앞에서 작성했던 JSP 페이지와 똑같은 일을 하지만 작성방법은 훨씬 더 복잡하다. 잘 따라와 보자.

   1). 서블릿 클래스를 작성할때 지켜야 할 규칙 3가지중 첫번째
       - 서블릿 클래스는 javax.servlet.http.HttpServlet 클래스를 상속받도록 만들어야 한다.
       그리고 여기에 한가지 규칙을 더 붙이자면 반드시 public 으로 클래스를 만들어야 한다.
       왜냐하면 웹컨테이너(Tomcat Server)가 우리가 생성한 서블릿 클래스에 접근해서 
       서블릿객체를 만들기 위해서는 public 접근 권한을 주어야 하기 때문이다.

       그러므로 서블릿 클래스의 기본 골격은 아래와 같다.

       public class HundredServlet extends HttpServlet {


       }


   2). 다음으로 서블릿 클래스 안에 doGet()메소드 또는 doPost()메소드를 선언해야 한다.

       public class HundredServlet extends HttpServlet {

            public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws SevletException, IOException{

            }
       }

       doGet()메소드 또는 doPost()메소드의 접근제한자는 public 으로 해야한다.
       왜냐하면 웹컨테이너(Tomcat Server)가 웹클라이언트로 부터의 요청을 받아서,
       요청처리를 해주고자 doGet()메소드 또는 doPost()메소드를 호출하기 때문에 
       접근제한자는 public 으로 해야한다.


   3). doGet() 메소드의  골격을 만든 다음에는 그 메소드 안에 처리해야할 내용을 코딩해야 한다.
       이 예제가 1 부터 100까지의 합을 구해서 그 결과를 출력하는 것이므로

       public class HundredServlet extends HttpServlet {

            public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws SevletException, IOException{

		int total = 0;
		for (int i=1; i<= 100; i++)
                     total += i; 

            }
       }
  

       그리고 나서 위의 결과인 total 에 들어간 값을 출력해주는 코드를 만들어 작성해야 한다.
       결과물은 웹브라우저 화면에 출력해주어야 하기에 HTML문서로 만들어야 한다.
       즉, 응답처리 결과인 HTML 문서는 doGet 메소드 또는 doPost 메서드의 두번째 파라미터를 
       이용해서 출력해준다.
       두번째 파라미터 타입은 javax.servlet.http.HttpServletResponse 인터페이스 타입인데,
       이 파라미터를 가지고 getWriter 라는 메소드를 호출하면 문자기반(2byte 기반) 
       출력 필터스트림인 PrintWriter 라는 객체가 생성되어지도록 되어있다.

       PrintWriter writer = response.getWriter();
                          // PrintWriter 객체를 리턴해주는 메소드.

       PrintWriter 클래스는 java.io 패키지의 PrintWriter 클래스이다.
       그런데 PrintWriter 객체를 사용하여 우리는 콘솔상이나 파일에 출력시키는 것이 아니라, 
       웹브라우저상에 결과물을 출력해주어야 한다.
       그래서 PrintWriter 객체의 메소드인 print 나 println 나 printf 메소드를 사용하여 
       print, println, printf 메소드의 파라미터(문자열) 값에 HTML코드로 된 데이터를 넣어주면 
       웹클라이언트의 웹브라우저에 HTML 코드로 전송하여 출력하도록 만들어져 있는것이다.

       doGet 메소드 또는 doPost 메소드 작성시 발생하는 예외처리중 
       ServletException은 생략할 수 있으나, IOException은 생략할 수 없다. 
       왜냐하면 doGet 메소드 안에서 호출하는 response.getWriter(); 메소드가 
       IOException을 발생하기 때문입니다.

       어쨌거나 우리는 이 규칙(공식)대로 따라 아래와 같이 작성하기만 하면 된다.

	import javax.servlet.http.*;
	import javax.servlet.*;
	import java.io.*;
	public class HundredServlet extends HttpServlet {

	    public void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws IOException, ServletException {

	        int total = 0;
	        for (int i=1; i<= 100; i++)
                     total += i; 

	        response.setContentType("text/html;charset=utf-8"); 
	        PrintWriter out = response.getWriter();
	        out.println("<HTML>");
	        out.println("<HEAD><TITLE>1부터 100까지 더하는 서블릿</TITLE></HEAD>");
	        out.println("<BODY>");
	        out.printf("1부터 100까지의 합은 = %d", total);
	        out.println("</BODY>");
	        out.println("</HTML>");
	    }
	}       



5. >>>> JSP 페이지에서 사용할 수 있는 내장객체변수의 종류 <<<<<

   ==> 일반적인 JAVA 프로그램에서는 변수를 사용하기 전에 반드시 선언을 해야 하지만,
       JSP 페이지에서는 선언을 하지 않고도 사용할 수 있는 변수가 있다.
               이러한 변수를 JSP 페이지의 내장객체변수(implicit variable)라고 부른다.
               왜냐하면 웹컨테이너(=WAS, 톰캣서버)가 JSP 페이지를 Servlet 클래스로 변환해줄때
               자동적으로 변수선언을 해주기 때문에 우리는 변수선언 없이 그냥 사용만 하면 된다.
     
    -----------------------------------------------------------------
          내장객체변수이름                  역할
    -----------------------------------------------------------------
     request               doGet, doPost 메소드의 첫번째 파라미터와 동일한 역할을 하는 내장객체로서
                                                           웹클라이언트에서 보내온 데이터값을 받아서 처리해주는 역할을 함.
     
     response              doGet, doPost 메소드의 두번째 파라미터와 동일한 역할을 하는 내장객체로서 
                                                   웹클라이언트의 요청에 대해 응답결과 처리해주는 역할을 함. 
     
     out                   웹브라우저로 HTML 코드를 출력해주는 기능을 하는 내장객체로서
                           Servlet 클래스 안에서 response.getWriter() 메소드를 호출해서 얻은 
                           PrintWriter 객체와 동일한 기능을 하는 내장객체임.
     
     session               세션이라함은 여러 웹 컴포넌트들이 협력작업을 시작해서 끝내기까지의 기간을
                                                   의미하는 것으로써, session 내장객체 속에는 세션을 시작하고 끝내는 기능과 
                                                   그 기간동안 웹 컴포넌트들이 데이터를 주고 받을 수 있는 기능들이 들어있다.
    
     application           JSP 페이지가 속한 웹어플리케이션에 관련된 다양한 기능을 하는 내장객체.
     
     config                JSP 페이지가 속한 웹어플리케이션의 초기상태와 관련된 기능을 하는 내장객체.                                                    
                                  


6. 액션(action)이란?
-- XML 기술을 이용해서 기존의 JSP 문법을 확장해준 매커니즘으로 JSP 규격서에 
      정의되어 있는 기술이다.
      이것은 XML 태그 형태를 띄기 때문에 액션태그(action tag)라고도 부르며,
      간단히 액션(action)이라고 한다.
      왜냐하면 이런 태그가 어떤 동작(action)을 수행하는 역할을 하기 때문이다.
   
 
 ※ 액션(action)의 2가지 종류
  1) 표준액션(Standard action) 
     => JSP 페이지에서 막바로 사용이 가능함.
  
  2) 커스텀액션(Custom action)
     => 별도의 라이브러리를 설치해야만 사용가능함.
		라이브러리는 인터넷에서 다운로드 받을수도 있고(JSTL),
		사용자가 직접 만들어 사용할수도 있음.
  
           
 ※ 표준액션(Standard action)과 커스텀액션(Custom action)의 외형적 차이

   1. 표준액션(Standard action)은
	    모든 태그의 이름 앞에 jsp 라는 접두어가 붙음.
	    예)  <jsp:include page="abc.jsp" />

   2. 커스텀액션(Custom action)은
	    모든 태그의 이름 앞에 jsp 이외의 다른 이름의 접두어가 붙음.
	    예)  <c:set var="cnt" value="0" />        


 ※ 액션(action)이 HTML 태그와 다른점.
-- 액션태그(action tag)의 모습은 HTML 태그와 많이 닮았지만, 
   HTML 태그처럼 클라이언트의 웹브라우저로 직접 전달되는 것이 아니라,
      웹컨테이너(톰캣서버)쪽에서 실행되고, 그 결과만 클라이언트의 웹브라우저에서 출력된다는 것이다.
     
 ※ 표준액션(Standard action)을 이용해서 할수 있는 일
  ==> <jsp:include> 와 <jsp:forward> 같은 표준액션을 이용하면 
	    자바에서 했던 include()메소드, forward()메소드와 똑같은 기능을 구현할수 있다.
   
  ==> <jsp:useBean>, <jsp:setProperty>등의 표준액션을 이용하면 
	    자바코드를 작성하지 않고도 
	    자바빈(JavaBean, 자바빈 규격서에 따라 만든 자바클래스)을 만들어 사용할 수 있다. 
      
 ※   <jsp:useBean> 표준액션의 scope 
 ==> 자바빈즈를 객체화 시킨 후 이 객체를 어느 범위까지 사용할지를 결정하는 것이다.
 1. scope="page" 
   - scope 속성 기본값이므로 특별히 지정하지 않으면 이 값이 적용된다.
         이 객체는 요청된 JSP 페이지 내에서만 사용되고, 실행 종료와 함께 객체는 자동으로 소멸된다. 
         그러므로 다른  JSP 페이지에서는 사용될 수 없다. 
         또한 요청된 JSP 페이지를 부를때 마다 이 객체는 매번 새로이 생성된다.     

 2. scope="request" 
   - 이 객체는 요청된 JSP 페이지내에서 사용된 후 , 이 JSP 페이지와 연결된 다른 JSP 페이지까지 사용되어진다.
         연결된 다른 JSP 페이지에서 실행 종료와 함께 객체는 자동으로 소멸된다.  
     request 영역에서 이 객체가 있으면 생성된 객체를 사용하고 없으면 객체를 새로이 만들어 request 영역에 올려둔다.      
 
 3. scope="session" 
   - 이 객체는 세션이 종료(소멸)할때 까지 객체는 소멸하지 않고 사용된다.
         세션이 종료(소멸)되는 순간 이 객체는 자동으로 소멸된다.
     session 영역에서 이 객체가 있으면 생성된 객체를 사용하고 없으면 객체를 새로이 만들어 session 영역에 올려둔다. 
  
 4. scope="application" 
   - 이 객체는 웹 어플리케이션이 종료될때까지 소멸되지 않고 사용되어진다.
         이 객체는 웹 어플리케이션이 종료될때 자동으로 소멸되어지는 것이므로
         웹 어플리케이션의 공동으로 사용되어지는 객체이어야 한다.
     application 영역에서 이 객체가 있으면 생성된 객체를 사용하고 없으면 객체를 새로이 만들어 application 영역에 올려둔다.          
      
 <jsp:useBean id="객체명" class="패키지명.클래스명" scope="page" />
 <jsp:useBean id="객체명" class="패키지명.클래스명" scope="request" />
 <jsp:useBean id="객체명" class="패키지명.클래스명" scope="session" />
 <jsp:useBean id="객체명" class="패키지명.클래스명" scope="application" />  
 
  
      
      
      
      
      
      
      
      
      
      
      
       
          
  
  
  
  
  
      